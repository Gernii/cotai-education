import type { CourseProps } from "./types";
import { CourseIds } from "./constants";
import { ProgramIds } from "../programs/constants";
import {
    PUBLIC_COURSE_PRICE_MC4AI,
    PUBLIC_COURSE_REGISTER_URL_MC4AI,
    PUBLIC_HOSTNAME,
} from "$env/static/public";
import { routerPath } from "$lib/utils/constants";
import { SkillTypes } from "$lib/features/skill-icons/constant";

export const dataCourseMC4AI = (): CourseProps => {
    const id = CourseIds.mc4ai;
    return {
        id,
        title: "Math Coding for AI",
        shortTitle: "MC4AI",
        price: Number.parseInt(PUBLIC_COURSE_PRICE_MC4AI),
        studyTypes: ["online", "selfPaced"],
        nextCourseId: CourseIds.ml4ai,

        programId: ProgramIds.public_training,

        registerUrl: PUBLIC_COURSE_REGISTER_URL_MC4AI,

        learningOutcomes: [
            'S·∫µn s√†ng ƒë·ªÉ "ƒë·∫Øm m√¨nh v√†o H·ªçc m√°y (Machine Learning)"',
            'Tr·∫£i nghi·ªám qu√° tr√¨nh l√†m "ƒê·ªì √°n m√¥n h·ªçc" capstone project',
            "S·ª≠ d·ª•ng th√†nh th·∫°o c√°c th∆∞ vi·ªán Ph√¢n t√≠ch d·ªØ li·ªáu ph·ªï bi·∫øn",
            "Hi·ªÉu s√¢u v√† c√≥ th·ªÉ t·ª± l·∫≠p tr√¨nh ƒë∆∞·ª£c c√°c thu·∫≠t to√°n AI ph·ªï bi·∫øn",
        ],

        experienceRequirement: [],
        whoShouldJoin: [
            `ƒë√£ bi·∫øt l·∫≠p tr√¨nh Python c∆° b·∫£n (t∆∞∆°ng ƒë∆∞∆°ng kho√° [PythonAI](${PUBLIC_HOSTNAME}${routerPath.courseId(CourseIds.pythonai)}) c·ªßa CoTAI)`,
            "mu·ªën √¥n luy·ªán *To√°n ma tr·∫≠n* qua *Ph√¢n t√≠ch d·ªØ li·ªáu* ƒë·ªÉ ƒë∆∞·ª£c ƒë·∫Øm m√¨nh v√†o lƒ©nh v·ª±c AI",
        ],
        skills: [
            SkillTypes.python,
            SkillTypes.numpy,
            SkillTypes.pandas,
            SkillTypes.scikitLearn,
            SkillTypes.keras,
            SkillTypes.matplotlib,
            SkillTypes.plotly,
            SkillTypes.streamlit,
            SkillTypes.pillow,
            SkillTypes.opencv,
            SkillTypes.github,
            SkillTypes.markdown,
            SkillTypes.latex,
        ],
        archives: [
            {
                title: "S·ª≠ d·ª•ng th√†nh th·∫°o c√°c th∆∞ vi·ªán AI ph·ªï bi·∫øn",
                description:
                    "NumPy, Pandas, Matplotlib, Scikit-learn, TensorFlow & Keras, Plotly. C√°c th∆∞ vi·ªán AI ph·ªï bi·∫øn nh·∫•t, ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong c√°c d·ª± √°n AI hi·ªán nay",
            },
            {
                title: "Hi·ªÉu & c√†i ƒë·∫∑t ƒë∆∞·ª£c c√°c thu·∫≠t to√°n AI c∆° b·∫£n",
                description: " Gradient Descent, KNN, KMeans",
            },
            {
                title: "Hi·ªÉu & n·∫Øm v·ªØng c√°c m√¥ h√¨nh AI tuy·∫øn t√≠nh",
                description: "Linear, Losgistic, Softmax Regression",
            },
            {
                title: "C√≥ th·ªÉ t·∫°o m·ªôt ·ª©ng d·ª•ng AI ho√†n ch·ªânh",
                description: "√Åp d·ª•ng ki·∫øn th·ª©c l·∫≠p tr√¨nh AI v√†o vi·ªác x√¢y d·ª±ng ·ª©ng d·ª•ng AI",
            },
        ],

        description: `Kh√≥a h·ªçc MC4AI cung c·∫•p *m·ªôt c√°ch tr·ª±c quan* c√°c ki·∫øn th·ª©c **To√°n** *c·ªët l√µi* ƒë·ªÉ h·ªçc vi√™n b·∫Øt ƒë·∫ßu l·∫≠p tr√¨nh d·ª± √°n AI & *Ph√¢n t√≠ch d·ªØ li·ªáu* qua c√°c gi·∫£i thu·∫≠t v√† th∆∞ vi·ªán Python. Kho√° h·ªçc d√†nh cho c√°c h·ªçc vi√™n ƒë√£ bi·∫øt Python c∆° b·∫£n (c·∫ßn b√†i ki·ªÉm tra ƒë·∫ßu v√†o) ho·∫∑c ƒë√£ ho√†n th√†nh kho√° \`PythonAI\` c·ªßa CoTAI.`,
        descriptionMore: `üëâ B·∫°n lu√¥n mang m·ªôt n·ªói s·ª£ m√¥n To√°n? H√£y an t√¢m! Trung t√¢m t√†i nƒÉng CoTAI ƒë√£ mi·ªát m√†i bi√™n so·∫°n ƒë·ªÉ kho√° h·ªçc "L·∫≠p tr√¨nh n·ªÅn t·∫£ng To√°n cho AI" ƒë∆∞·ª£c tr·ª±c quan d·ªÖ hi·ªÉu, ngay c·∫£ v·ªõi h·ªçc sinh THPT. üí° B√≠ quy·∫øt r·∫•t ƒë∆°n gi·∫£n: ƒë·ªÉ c√°c b·∫°n "v·ªçc" th·∫≠t nhi·ªÅu v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø! T·ª´ h√¨nh ·∫£nh, vƒÉn b·∫£n, ƒë·∫øn s·ªë li·ªáu kinh doanh.
- üî• X·ª≠ l√Ω, t√≠nh to√°n, bi·∫øn ƒë·ªïi, hi·ªÉn th·ªã c√°c m·∫£ng d·ªØ li·ªáu th·ª±c üëâ hi·ªÉu ngay v·ªÅ ma tr·∫≠n v√† ƒë·∫°i s·ªë tuy·∫øn t√≠nh cho AI.
- üî• M√¥ ph·ªèng & sinh m·∫´u, ƒë∆∞a ra d·ª± ƒëo√°n qua c√°c m√¥ h√¨nh h·ªçc m√°y c∆° b·∫£n üëâ hi·ªÉu ngay v·ªÅ x√°c su·∫•t & ‚Äúni·ªÅm tin‚Äù, v·ªÅ c√°c m√¥ h√¨nh d·ª± ƒëo√°n c·ªßa AI.
- üî• Thi·∫øt k·∫ø ·ª©ng d·ª•ng m·ªõi c√≥ t√≠ch h·ª£p c√°c m√¥ h√¨nh AI v·ªõi ƒë·∫∑c tr∆∞ng hu·∫•n luy·ªán s·∫µn (pre-trained models) üëâ tho·∫£ s·ª©c th·ª±c h√†nh ph√°t tri·ªÉn c√°c d·ª± √°n ph√¢n t√≠ch d·ªØ li·ªáu (Data Analysis)`,
        components: [],

        curriculum: [
            {
                title: "S1. ƒê·∫°i s·ªë tuy·∫øn t√≠nh & Numpy c∆° b·∫£n",
                details: {
                    content: `- C√°c kh√°i ni·ªám c∆° b·∫£n c·ªßa ƒê·∫°i s·ªë tuy·∫øn t√≠nh: Vector, Ma tr·∫≠n
    - C∆° b·∫£n v·ªÅ th∆∞ vi·ªán Numpy:
      - Kh·ªüi t·∫°o nd array
      - Truy c·∫≠p ph·∫ßn t·ª≠, h√†ng, c·ªôt, slicing
      - Shape, reshape, transpose, dot product, element-wise operators`,
                },
            },
            {
                title: "S2. C√°c h√†m th√¥ng d·ª•ng c·ªßa Numpy & Matplotlib",
                details: {
                    content: `- C√°c h√†m Numpy: sum, mean, min, max, argmin, argmax; concatenate, where, filter
    - Matplotlib: H√†m scatter & plot`,
                },
            },
            {
                title: "S3. Pandas & Ph√¢n t√≠ch d·ªØ li·ªáu",
                details: {
                    content: `- Pandas: T·∫°o & x·ª≠ l√Ω Dataframe: truy c·∫≠p h√†ng, c·ªôt, filter; C√°c h√†m map & apply
    - C√°c k·ªπ thu·∫≠t ph√¢n t√≠ch d·ªØ li·ªáu: ƒê·ªçc, l√†m s·∫°ch, t·ªïng h·ª£p d·ªØ li·ªáu & v·∫Ω ƒë·ªì th·ªã`,
                },
            },
            {
                title: "S4. Thu·∫≠t to√°n Gradient Descent & Plotly",
                details: {
                    content: `- Kh√°i ni·ªám ƒë·∫°o h√†m & Gradient
    - Thu·∫≠t to√°n Gradient Descent (nguy√™n l√Ω, chi ti·∫øt c√†i ƒë·∫∑t)
    - Th∆∞ vi·ªán Plotly:
      - Module express: h√†m scatter_3d
      - Module graph_objects: h√†m Scatter3d & Surface`,
                },
            },
            {
                title: "S5. X√°c su·∫•t & Ph√¢n ph·ªëi x√°c su·∫•t",
                details: {
                    content: `- Kh√°i ni·ªám x√°c su·∫•t & ·ª©ng d·ª•ng trong AI
    - Kh√°i ni·ªám ph√¢n ph·ªëi x√°c su·∫•t, c√°c ph√¢n ph·ªëi th√¥ng d·ª•ng & c√°ch gi·∫£ l·∫≠p b·∫±ng Numpy: Ph√¢n ph·ªëi Bernoulli, Categorical, ph√¢n ph·ªëi ƒë·ªÅu & ph√¢n ph·ªëi chu·∫©n`,
                },
            },
            {
                title: "S6. ki·ªÉm tra gi·ªØa k·ª≥ & ƒëƒÉng k√Ω d·ª± √°n",
            },
            {
                title: "S7. Thu·∫≠t to√°n kNN & kMeans",
                details: {
                    content: `- Thu·∫≠t to√°n kNN:
      - Nguy√™n l√Ω & chi ti·∫øt c√†i ƒë·∫∑t v·ªõi Numpy
      - √Åp d·ª•ng kNN b·∫±ng th∆∞ vi·ªán Scikit-learn
    - Thu·∫≠t to√°n kMeans:
      - Nguy√™n l√Ω & chi ti·∫øt c√†i ƒë·∫∑t v·ªõi Numpy
      - √Åp d·ª•ng kMeans b·∫±ng th∆∞ vi·ªán Scikit-learn`,
                },
            },
            {
                title: "S8. M√¥ h√¨nh Linear Regression",
                details: {
                    content: `- Gi·ªõi thi·ªáu b√†i to√°n Regression
    - M√¥ h√¨nh Linear Regression
    - MSE Loss
    - √Åp d·ª•ng m√¥ h√¨nh Linear Regression b·∫±ng c√°c th∆∞ vi·ªán Scikit-learn & Keras`,
                },
            },
            {
                title: "S9. M√¥ h√¨nh Logistic Regression",
                details: {
                    content: `- H√†m Sigmoid & b√†i to√°n Binary Classification
    - M√¥ h√¨nh Logistic Regression & Binary Cross-Entropy Loss
    - √Åp d·ª•ng m√¥ h√¨nh Logistic Regression b·∫±ng c√°c th∆∞ vi·ªán Scikit-learn & Keras`,
                },
            },
            {
                title: "S10. M√¥ h√¨nh Softmax Regression",
                details: {
                    content: `- H√†m Softmax & Cross-Entropy
    - Gi·ªõi thi·ªáu b√†i to√°n Multi-class Classification & m√¥ h√¨nh Softmax Regression
    - Categorical Cross-Entropy Loss
    - √Åp d·ª•ng m√¥ h√¨nh Softmax Regression b·∫±ng th∆∞ vi·ªán Keras`,
                },
            },
            {
                title: "S11: Thu·∫≠t to√°n Gradient Descent cho c√°c m√¥ h√¨nh tuy·∫øn t√≠nh",
                details: {
                    content: `- L√Ω thuy·∫øt to√°n c·ªßa m√¥ h√¨nh Linear Regression
    - Chi ti·∫øt c√†i ƒë·∫∑t thu·∫≠t to√°n GD
    - K·ªπ thu·∫≠t Normalize
    - Thu·∫≠t to√°n SGD & Mini-batch GD`,
                },
            },
            {
                title: "S12. Thi cu·ªëi k·ª≥",
            },
            {
                title: "S13. B√°o c√°o d·ª± √°n",
            },
        ],
    };
};
