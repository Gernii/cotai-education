import type { CourseProps } from "./types";
import { CourseIds } from "./constants";
import { ProgramIds } from "../programs/constants";
import {
    PUBLIC_COURSE_PRICE_MC4AI,
    PUBLIC_COURSE_REGISTER_URL_MC4AI,
    PUBLIC_HOSTNAME,
} from "$env/static/public";
import { routerPath } from "$lib/utils/constants";
import { SkillTypes } from "$lib/features/skill-icons/constant";

export const dataCourseMC4AI = (): CourseProps => {
    const id = CourseIds.mc4ai;
    return {
        id,
        title: "Math Coding for AI",
        shortTitle: "MC4AI",
        price: Number.parseInt(PUBLIC_COURSE_PRICE_MC4AI),
        studyTypes: ["online", "selfPaced"],
        nextCourseId: CourseIds.ml4ai,

        programId: ProgramIds.public_training,

        registerUrl: PUBLIC_COURSE_REGISTER_URL_MC4AI,

        learningOutcomes: [
            "Tr·∫£i nghi·ªám qu√° tr√¨nh l√†m D·ª± √°n cu·ªëi kh√≥a capstone project",
            "S·ª≠ d·ª•ng th√†nh th·∫°o c√°c th∆∞ vi·ªán Ph√¢n t√≠ch d·ªØ li·ªáu ph·ªï bi·∫øn",
            "Hi·ªÉu s√¢u v√† c√≥ th·ªÉ t·ª± l·∫≠p tr√¨nh ƒë∆∞·ª£c c√°c m√¥ h√¨nh AI c∆° b·∫£n",
            'S·∫µn s√†ng ƒë·ªÉ "ƒë·∫Øm m√¨nh v√†o H·ªçc m√°y" (Machine Learning)',
        ],

        experienceRequirement: [],
        whoShouldJoin: [
            `ƒë√£ bi·∫øt l·∫≠p tr√¨nh Python c∆° b·∫£n (t∆∞∆°ng ƒë∆∞∆°ng kho√° [PythonAI](${PUBLIC_HOSTNAME}${routerPath.courseId(CourseIds.pythonai)}) c·ªßa CoTAI)`,
            "mu·ªën √¥n luy·ªán *To√°n ma tr·∫≠n* qua *Ph√¢n t√≠ch d·ªØ li·ªáu* ƒë·ªÉ ƒë∆∞·ª£c ƒë·∫Øm m√¨nh v√†o lƒ©nh v·ª±c AI",
        ],
        skills: [
            SkillTypes.python,
            SkillTypes.numpy,
            SkillTypes.pandas,
            SkillTypes.scikitLearn,
            SkillTypes.keras,
            SkillTypes.matplotlib,
            SkillTypes.plotly,
            SkillTypes.streamlit,
            SkillTypes.pillow,
            SkillTypes.opencv,
            SkillTypes.github,
            SkillTypes.markdown,
            SkillTypes.latex,
        ],
        archives: [
            {
                title: "S·ª≠ d·ª•ng th√†nh th·∫°o c√°c th∆∞ vi·ªán AI ph·ªï bi·∫øn",
                description:
                    "NumPy, Pandas, Matplotlib, Scikit-learn, TensorFlow & Keras, Plotly. C√°c th∆∞ vi·ªán AI ph·ªï bi·∫øn nh·∫•t, ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong c√°c d·ª± √°n AI hi·ªán nay",
            },
            {
                title: "Hi·ªÉu & c√†i ƒë·∫∑t ƒë∆∞·ª£c c√°c thu·∫≠t to√°n AI c∆° b·∫£n",
                description: " Gradient Descent, KNN, KMeans",
            },
            {
                title: "Hi·ªÉu & n·∫Øm v·ªØng c√°c m√¥ h√¨nh AI tuy·∫øn t√≠nh",
                description: "Linear, Losgistic, Softmax Regression",
            },
            {
                title: "C√≥ th·ªÉ t·∫°o m·ªôt ·ª©ng d·ª•ng AI ho√†n ch·ªânh",
                description: "√Åp d·ª•ng ki·∫øn th·ª©c l·∫≠p tr√¨nh AI v√†o vi·ªác x√¢y d·ª±ng ·ª©ng d·ª•ng AI",
            },
        ],

        description: `Kh√≥a h·ªçc MC4AI cung c·∫•p *m·ªôt c√°ch tr·ª±c quan* c√°c ki·∫øn th·ª©c **To√°n** *c·ªët l√µi* ƒë·ªÉ h·ªçc vi√™n b·∫Øt ƒë·∫ßu l·∫≠p tr√¨nh d·ª± √°n AI & *Ph√¢n t√≠ch d·ªØ li·ªáu* qua c√°c gi·∫£i thu·∫≠t v√† th∆∞ vi·ªán Python. Kho√° h·ªçc d√†nh cho c√°c h·ªçc vi√™n ƒë√£ bi·∫øt Python c∆° b·∫£n (c·∫ßn b√†i ki·ªÉm tra ƒë·∫ßu v√†o) ho·∫∑c ƒë√£ ho√†n th√†nh kho√° \`PythonAI\` c·ªßa CoTAI.`,
        descriptionMore: `üëâ B·∫°n lu√¥n mang m·ªôt n·ªói s·ª£ m√¥n To√°n? H√£y an t√¢m! Trung t√¢m t√†i nƒÉng CoTAI ƒë√£ mi·ªát m√†i bi√™n so·∫°n ƒë·ªÉ kho√° h·ªçc "L·∫≠p tr√¨nh n·ªÅn t·∫£ng To√°n cho AI" ƒë∆∞·ª£c tr·ª±c quan d·ªÖ hi·ªÉu, ngay c·∫£ v·ªõi h·ªçc sinh THPT. 
        
üí° B√≠ quy·∫øt r·∫•t ƒë∆°n gi·∫£n: ƒë·ªÉ c√°c b·∫°n "v·ªçc" th·∫≠t nhi·ªÅu v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø! T·ª´ h√¨nh ·∫£nh, √¢m thanh, vƒÉn b·∫£n v√† s·ªë li·ªáu.
- X·ª≠ l√Ω, t√≠nh to√°n, bi·∫øn ƒë·ªïi v√† hi·ªÉn th·ªã c√°c m·∫£ng d·ªØ li·ªáu th·ª±c t·∫ø üëâ hi·ªÉu ngay v·ªÅ ma tr·∫≠n v√† ƒë·∫°i s·ªë tuy·∫øn t√≠nh cho AI.
- M√¥ ph·ªèng & sinh m·∫´u, ƒë∆∞a ra d·ª± ƒëo√°n qua c√°c m√¥ h√¨nh h·ªçc m√°y c∆° b·∫£n üëâ hi·ªÉu ngay v·ªÅ x√°c su·∫•t & ‚Äúni·ªÅm tin‚Äù, v·ªÅ c√°c m√¥ h√¨nh d·ª± ƒëo√°n c·ªßa AI.
- Thi·∫øt k·∫ø ·ª©ng d·ª•ng m·ªõi c√≥ t√≠ch h·ª£p c√°c m√¥ h√¨nh AI v·ªõi ƒë·∫∑c tr∆∞ng hu·∫•n luy·ªán s·∫µn (pre-trained models) üëâ tho·∫£ s·ª©c th·ª±c h√†nh ph√°t tri·ªÉn c√°c d·ª± √°n ph√¢n t√≠ch d·ªØ li·ªáu (Data Analysis)`,
        components: [],

        curriculum: [
            {
                title: "S1. ƒê·∫°i s·ªë tuy·∫øn t√≠nh & Numpy c∆° b·∫£n",
                details: {
                    content: `ƒê·∫°i s·ªë tuy·∫øn t√≠nh l√† n·ªÅn t·∫£ng t√≠nh to√°n ƒë·ªÉ x√¢y d·ª±ng n√™n c√°c m√¥ h√¨nh AI. 
·ªû bu·ªïi h·ªçc n√†y, b·∫°n s·∫Ω ƒë∆∞·ª£c l√†m quen v·ªõi c√°c ph√©p to√°n ph·ªï bi·∫øn nh·∫•t trong ƒê·∫°i s·ªë tuy·∫øn t√≠nh th√¥ng qua vi·ªác s·ª≠ d·ª•ng th∆∞ vi·ªán \`numpy\` nh∆∞ t√≠nh to√°n song song, ph√©p nh√¢n 2 ma tr·∫≠n, ph√©p ƒëo kho·∫£ng c√°ch gi·ªØa 2 \`vector\`.`,
                },
            },
            {
                title: "S2. C√°c h√†m th√¥ng d·ª•ng c·ªßa Numpy & Matplotlib",
                details: {
                    content: `"A Chart is Worth A Thousand Words". M·ªôt ƒë·ªì th·ªã c√≥ th·ªÉ m√¥ t·∫£ thay cho c·∫£ ng√†n l·ªùi n√≥i.
Trong Python ta c√≥ th·ªÉ d·ªÖ d√†ng v·∫Ω ƒë·ªì th·ªã b·∫±ng th∆∞ vi·ªán \`matplotlib\`. Ngo√†i ra bu·ªïi h·ªçc n√†y c√≤n cung c·∫•p cho b·∫°n c√°ch s·ª≠ d·ª•ng c√°c h√†m ph·ªï bi·∫øn trong th∆∞ vi·ªán \`numpy\`.`,
                },
            },
            {
                title: "S3. D·ªØ li·ªáu d·∫°ng b·∫£ng `tabular data` & Ph√¢n t√≠ch d·ªØ li·ªáu",
                details: {
                    content: `N·ªÅn t·∫£ng c·ªßa Ph√¢n t√≠ch d·ªØ li·ªáu ƒë·∫øn t·ª´ vi·ªác qu·∫£n l√Ω v√† "hi·ªÉu" d·ªØ li·ªáu d·∫°ng b·∫£ng. 
·ªû bu·ªïi n√†y, b·∫°n s·∫Ω kh√°m ph√° c√°ch x·ª≠ l√Ω v√† thao t√°c d·ªØ li·ªáu trong c√°c b·∫£ng t√≠nh th√¥ng qua th∆∞ vi·ªán \`pandas\`. Qua ƒë√≥, b·∫°n s·∫Ω ƒë∆∞·ª£c tr·∫£i nghi·ªám qu√° tr√¨nh ph√¢n t√≠ch d·ªØ li·ªáu, t·ª´ vi·ªác l·ªçc, s·∫Øp x·∫øp, ƒë·∫øn t√≠nh to√°n v√† t·ªïng h·ª£p th√¥ng tin, nh·∫±m r√∫t ra nh·ªØng k·∫øt lu·∫≠n quan tr·ªçng "insights" t·ª´ d·ªØ li·ªáu. Ngo√†i ra, b·∫°n c√≤n ƒë∆∞·ª£c h·ªçc c√°ch s·ª≠ d·ª•ng th∆∞ vi·ªán v·∫Ω ƒë·ªì th·ªã "x·ªãn x√≤" h∆°n, ƒë√≥ l√† \`plotly\`.`,
                },
            },
            {
                title: "S4. ƒê·∫°o h√†m, `Gradient` & thu·∫≠t to√°n `Gradient Descent`",
                details: {
                    content: `B·∫°n c√≥ tin kh√¥ng: h·∫ßu h·∫øt c√°c m√¥ h√¨nh AI th√¥ng minh hi·ªán nay ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán d·ª±a tr√™n m·ªôt kh√°i ni·ªám To√°n c∆° b·∫£n ·ªü b·∫≠c THPT! üò≤
- Kh√°i ni·ªám ƒë·∫°o h√†m & Gradient
- Thu·∫≠t to√°n Gradient Descent (nguy√™n l√Ω, chi ti·∫øt c√†i ƒë·∫∑t)`,
                },
            },
            {
                title: "S5. X√°c su·∫•t & Ph√¢n ph·ªëi x√°c su·∫•t",
                details: {
                    content: `H√¥m nay b·∫°n nghƒ© kh·∫£ nƒÉng bao nhi√™u % s·∫Ω m∆∞a? L√†m sao ƒë·ªÉ m√°y t√≠nh m√¥ t·∫£ "ni·ªÅm tin" n√†y?
- Kh√°i ni·ªám x√°c su·∫•t & ·ª©ng d·ª•ng trong AI
- Kh√°i ni·ªám ph√¢n ph·ªëi x√°c su·∫•t, c√°c ph√¢n ph·ªëi th√¥ng d·ª•ng & c√°ch gi·∫£ l·∫≠p b·∫±ng Numpy: Ph√¢n ph·ªëi Bernoulli, Categorical, ph√¢n ph·ªëi ƒë·ªÅu & ph√¢n ph·ªëi chu·∫©n`,
                },
            },
            {
                title: "S6. Ki·ªÉm tra gi·ªØa kh√≥a & ƒëƒÉng k√Ω d·ª± √°n",
            },
            {
                title: "S7. Thu·∫≠t to√°n kNN & kMeans",
                details: {
                    content: `·ªû bu·ªïi n√†y, b·∫°n s·∫Ω hi·ªÉu v·ªÅ ·ª©ng d·ª•ng c·ªßa ph√©p ƒëo *kho·∫£ng c√°ch* (distance) nh∆∞ l√† m·ª©c ƒë·ªô gi·ªëng nhau \`similarity\` th√¥ng qua 2 thu·∫≠t to√°n AI ƒë·∫ßu ti√™n: $k$ ƒëi·ªÉm g·∫ßn nh·∫•t \`kNN\` ($k$ nearest neighbors) v√† $k$ ƒëi·ªÉm tr·ªçng t√¢m \`kMeans\`. B√™n c·∫°nh ƒë√≥, b·∫°n c√≤n ƒë∆∞·ª£c h·ªçc v·ªÅ c√°ch s·ª≠ d·ª•ng th∆∞ vi·ªán \`sklearn\` - 1 trong nh·ªØng th∆∞ vi·ªán ph·ªï bi·∫øn nh·∫•t v·ªÅ "H·ªçc m√°y" \`Machine Learning\`.`,
                },
            },
            {
                title: "S8, S9, S10. M√¥ h√¨nh tuy·∫øn t√≠nh `linear models`",
                details: {
                    content: `Ch·ªâ c·∫ßn cung c·∫•p d·ªØ li·ªáu, AI c√≥ th·ªÉ h·ªçc ra c√°ch d·ª± ƒëo√°n gi√° tr·ªã (nh∆∞ ƒëi·ªÉm s·ªë, doanh thu, nhi·ªát ƒë·ªô ng√†y mai, ...) ho·∫∑c ph√¢n lo·∫°i nh√£n (b√¨nh lu·∫≠n t√≠ch c·ª±c / ti√™u c·ª±c, ·∫£nh ƒë·∫ßu v√†o ch·ª©a con g√¨, ...).

Chu·ªói 3 b√†i h·ªçc Sessions 8, 9, 10 s·∫Ω gi√∫p b·∫°n th√†nh th·∫°o c√°ch t·∫°o ra c√°c m√¥ h√¨nh AI ƒë∆°n gi·∫£n nh·∫•t, ƒë√≥ l√† m√¥ h√¨nh "ph·∫≥ng, tuy·∫øn t√≠nh" \`linear models\`. Ngo√†i ra, b·∫°n c√≤n ƒë∆∞·ª£c h·ªçc c√°ch s·ª≠ d·ª•ng th∆∞ vi·ªán \`Keras\` ("deep learning for human", theo nh∆∞ l·ªùi gi·ªõi thi·ªáu c·ªßa t√°c gi·∫£.):

- S8. M√¥ h√¨nh d·ª± ƒëo√°n gi√° tr·ªã \`Linear Regression\`
- S9. M√¥ h√¨nh ph√¢n lo·∫°i nh·ªã ph√¢n (2 nh√£n) \`Logistic (Sigmoid) Regression\`
- S10. M√¥ h√¨nh ph√¢n lo·∫°i nhi·ªÅu nh√£n \`Softmax Regression\``,
                },
            },
            {
                title: "S11. Thu·∫≠t to√°n `Gradient Descent` cho c√°c m√¥ h√¨nh tuy·∫øn t√≠nh",
                details: {
                    content: `- L√Ω thuy·∫øt to√°n c·ªßa m√¥ h√¨nh \`Linear Regression\`
- Chi ti·∫øt c√†i ƒë·∫∑t thu·∫≠t to√°n \`GD\`
- K·ªπ thu·∫≠t \`Normalize\`
- Thu·∫≠t to√°n \`SGD\` & \`Mini-batch GD\``,
                },
            },
            {
                title: "S12. Ki·ªÉm tra cu·ªëi kh√≥a",
            },
            {
                title: "S13. B√°o c√°o d·ª± √°n",
            },
        ],
    };
};
